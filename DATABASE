# Create a full-featured single-file site inspired by common CS:GO/Roblox gamble UIs,
# but completely original branding/layout for "PetFlip".
# Includes: dashboard, balance, deposit/withdraw modals, inventory, coinflip, wheel,
# simple crash, provably fair demo (hash-based), recent wins feed, and localStorage accounts.
# All client-side (demo).

html = r"""<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>PetFlip â€” Play, Flip & Spin (Demo)</title>
  <style>
    :root{
      --bg:#0f1220; --panel:#171a2b; --mid:#1e2340; --soft:#23284d;
      --text:#e7e9ff; --muted:#a8b0d9; --accent:#7c5cff; --accent2:#4ad1ff; --win:#3bd17f; --lose:#ff5678; --warn:#ffcc66;
      --radius:16px; --shadow:0 8px 24px rgba(0,0,0,.25);
    }
    *{box-sizing:border-box}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,'Helvetica Neue',Arial,sans-serif;background:linear-gradient(180deg,var(--bg),#0c1020 40%,#0a0d1a);color:var(--text);}
    a{color:var(--accent2);text-decoration:none}
    .container{max-width:1200px;margin:0 auto;padding:24px}
    .nav{display:flex;align-items:center;justify-content:space-between;padding:16px 24px;background:rgba(23,26,43,.7);backdrop-filter:blur(8px);position:sticky;top:0;border-bottom:1px solid #2a2f57;z-index:10}
    .brand{display:flex;align-items:center;gap:12px;font-weight:800;letter-spacing:.5px}
    .logo{width:36px;height:36px;border-radius:12px;background:conic-gradient(from 180deg,var(--accent),var(--accent2));box-shadow:0 0 0 3px rgba(124,92,255,.2)}
    .nav-actions{display:flex;gap:10px}
    .btn{border:0;border-radius:12px;padding:10px 14px;background:var(--accent);color:white;font-weight:700;cursor:pointer;box-shadow:var(--shadow);transition:.2s}
    .btn:hover{transform:translateY(-1px);opacity:.95}
    .btn.ghost{background:transparent;border:1px solid #2c315f;color:var(--text);box-shadow:none}
    .grid{display:grid;grid-template-columns:280px 1fr;gap:20px;margin-top:20px}
    @media (max-width:920px){.grid{grid-template-columns:1fr} .nav-actions{display:none}}
    .card{background:linear-gradient(180deg,var(--panel),var(--mid));border:1px solid #2a2f57;border-radius:var(--radius);box-shadow:var(--shadow)}
    .card > .hdr{display:flex;align-items:center;justify-content:space-between;padding:14px 16px;border-bottom:1px solid #2a2f57;font-weight:700;color:#cfd5ff}
    .card .body{padding:16px}
    .balance{font-size:28px;font-weight:900;display:flex;align-items:center;gap:8px}
    .muted{color:var(--muted)}
    .pill{display:inline-flex;align-items:center;gap:8px;padding:6px 10px;border-radius:999px;border:1px solid #2a2f57;background:var(--soft);font-size:12px}
    .list{display:flex;flex-direction:column;gap:12px}
    .row{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-radius:12px;background:#1a1f3c;border:1px solid #2a2f57}
    .pet{display:flex;align-items:center;gap:10px}
    .avatar{width:36px;height:36px;border-radius:10px;background:#101533;border:1px solid #2a2f57;display:grid;place-items:center;font-size:18px}
    .tabbar{display:flex;gap:8px;flex-wrap:wrap}
    .tab{padding:10px 12px;border-radius:12px;border:1px solid #2a2f57;background:var(--soft);cursor:pointer;font-weight:700}
    .tab.active{background:linear-gradient(180deg,#2a2f57,#2d3467);box-shadow:inset 0 0 0 1px rgba(255,255,255,.05)}
    .cols{display:grid;grid-template-columns:1fr 1fr;gap:16px}
    @media (max-width:720px){.cols{grid-template-columns:1fr}}
    .input{width:100%;padding:10px 12px;border-radius:12px;border:1px solid #2a2f57;background:#141938;color:var(--text)}
    .action{display:flex;gap:8px;align-items:center}
    .history{max-height:220px;overflow:auto;display:flex;flex-direction:column;gap:8px}
    .tag{font-size:12px;padding:4px 8px;border-radius:8px;background:#1f2547;border:1px solid #2a2f57}
    .win{color:var(--win)} .lose{color:var(--lose)}
    .center{display:grid;place-items:center}
    .wheel{width:260px;height:260px;border-radius:50%;border:8px solid #101533;background:conic-gradient(#38bdf8 0 60deg,#a78bfa 60deg 120deg,#34d399 120deg 180deg,#fbbf24 180deg 240deg,#f472b6 240deg 300deg,#ef4444 300deg 360deg);position:relative;transition:transform 2.2s cubic-bezier(.2,.8,.2,1)}
    .needle{width:0;height:0;border-left:12px solid transparent;border-right:12px solid transparent;border-bottom:18px solid var(--warn);position:absolute;top:-2px;left:calc(50% - 12px);filter:drop-shadow(0 2px 0 #000)}
    .cf-card{display:grid;gap:12px}
    .crash-area{height:220px;background:#111634;border:1px solid #2a2f57;border-radius:12px;display:grid;place-items:center;font-size:28px;font-weight:800}
    .kbd{font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;background:#111634;border:1px solid #2a2f57;border-radius:10px;padding:8px 10px}
    .modal{position:fixed;inset:0;background:rgba(0,0,0,.6);display:none;align-items:center;justify-content:center;padding:20px}
    .modal .box{max-width:420px;width:100%;}
    .footer{opacity:.7;text-align:center;padding:26px}
  </style>
</head>
<body>
  <div class="nav">
    <div class="brand">
      <div class="logo"></div>
      <div>PetFlip <span class="muted" style="font-weight:500">demo</span></div>
    </div>
    <div class="nav-actions">
      <button class="btn ghost" onclick="openModal('loginModal')">Log in</button>
      <button class="btn" onclick="openModal('registerModal')">Account maken</button>
    </div>
  </div>

  <div class="container">
    <div class="grid">
      <!-- Left column -->
      <div class="card">
        <div class="hdr">Jouw account <span class="pill">client-side demo</span></div>
        <div class="body">
          <div class="balance">ðŸ’Ž <span id="balance">0</span></div>
          <div class="muted" id="hello">Niet ingelogd</div>
          <div style="height:10px"></div>
          <div class="action">
            <button class="btn" onclick="openModal('depositModal')">Deposit</button>
            <button class="btn ghost" onclick="withdrawSelected()">Withdraw geselecteerde</button>
          </div>
        </div>
        <div class="hdr">Inventory</div>
        <div class="body">
          <div class="list" id="inventory"></div>
          <div class="muted" id="emptyInv">Je inventory is leeg.</div>
        </div>

        <div class="hdr">Recent</div>
        <div class="body history" id="feed"></div>
      </div>

      <!-- Right column -->
      <div class="card">
        <div class="hdr">Games</div>
        <div class="body">
          <div class="tabbar">
            <div class="tab active" data-tab="coinflip" onclick="switchTab('coinflip')">ðŸª™ Coinflip</div>
            <div class="tab" data-tab="wheel" onclick="switchTab('wheel')">ðŸŽ¡ Wheel</div>
            <div class="tab" data-tab="crash" onclick="switchTab('crash')">ðŸ“ˆ Crash</div>
            <div class="tab" data-tab="fair" onclick="switchTab('fair')">ðŸ”’ Provably Fair</div>
          </div>
          <div style="height:14px"></div>

          <!-- Coinflip -->
          <div id="tab-coinflip">
            <div class="cols">
              <div class="card">
                <div class="hdr">Inzet</div>
                <div class="body cf-card">
                  <select id="petSelect" class="input"></select>
                  <div class="action">
                    <button class="btn" onclick="playCoinflip('heads')">Kop</button>
                    <button class="btn" onclick="playCoinflip('tails')">Munt</button>
                  </div>
                  <div class="muted">50/50 kans. Bij winst verdubbel je de item-waarde (duplicaat), bij verlies verlies je de inzet.</div>
                  <div id="cfResult" class="muted"></div>
                </div>
              </div>
              <div class="card center">
                <div class="body">
                  <div style="font-size:92px;line-height:1">ðŸª™</div>
                  <div class="muted">Kies Kop of Munt en flip!</div>
                </div>
              </div>
            </div>
          </div>

          <!-- Wheel -->
          <div id="tab-wheel" style="display:none">
            <div class="cols">
              <div class="card center">
                <div class="body">
                  <div class="needle"></div>
                  <div id="wheel" class="wheel"></div>
                  <div style="height:10px"></div>
                  <div class="muted">Segmenten: x0, x0.5, x1, x2, x5, x10</div>
                </div>
              </div>
              <div class="card">
                <div class="hdr">Inzet</div>
                <div class="body cf-card">
                  <select id="wheelPet" class="input"></select>
                  <button class="btn" onclick="spinWheel()">Spin</button>
                  <div id="wheelOut" class="muted"></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Crash -->
          <div id="tab-crash" style="display:none">
            <div class="cols">
              <div class="card">
                <div class="hdr">Crash grafiek (demo)</div>
                <div class="body">
                  <div id="crash" class="crash-area">x1.00</div>
                  <div style="height:12px"></div>
                  <div class="action">
                    <select id="crashPet" class="input"></select>
                    <button class="btn" id="crashBtn" onclick="startCrash()">Start</button>
                    <button class="btn ghost" id="cashoutBtn" onclick="cashout()" disabled>Cashout</button>
                  </div>
                  <div class="muted">Start en cashout vÃ³Ã³r de crash om de itemwaarde te vermenigvuldigen.</div>
                  <div id="crashOut" class="muted"></div>
                </div>
              </div>
              <div class="card">
                <div class="hdr">Regels</div>
                <div class="body">
                  <div class="list">
                    <div class="row"><div>Start multiplier</div><div class="tag">x1.00</div></div>
                    <div class="row"><div>Groei</div><div class="tag">+0.02 per tick</div></div>
                    <div class="row"><div>Crash kans</div><div class="tag">1% stijgend â†’ 20%</div></div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Provably fair -->
          <div id="tab-fair" style="display:none">
            <div class="cols">
              <div class="card">
                <div class="hdr">Seed configuratie</div>
                <div class="body">
                  <div class="list">
                    <label>Client seed <input id="clientSeed" class="input" placeholder="jouw seed (bewaar)"/></label>
                    <label>Server seed (gehasht) <input id="serverHash" class="input" disabled/></label>
                    <div class="action">
                      <button class="btn" onclick="rollDemo()">Genereer resultaat</button>
                      <button class="btn ghost" onclick="revealServer()">Reveal server seed</button>
                    </div>
                    <div class="kbd" id="fairOut">Resultaat verschijnt hier.</div>
                  </div>
                </div>
              </div>
              <div class="card">
                <div class="hdr">Uitleg</div>
                <div class="body">
                  <p class="muted">Deze demo gebruikt <b>HMAC-SHA256(serverSeed, clientSeed:nonce)</b> â†’ getal 0â€“1 â†’ game-uitkomst. Dit is controleerbaar: nadat de ronde eindigt kun je de server seed onthullen en zelf het hashresultaat narekenen.</p>
                  <p class="muted">Let op: dit is een <b>client-side demo</b>, niet voor echt gebruik.</p>
                </div>
              </div>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>

  <div class="footer muted">Â© PetFlip demo â€” geen verband met BloxySpin. Alle UI/branding is origineel. Clientâ€‘side prototype, geen echte trades.</div>

  <!-- Modals -->
  <div id="loginModal" class="modal"><div class="box card">
    <div class="hdr">Inloggen <button class="btn ghost" onclick="closeModal('loginModal')">Sluit</button></div>
    <div class="body">
      <input id="liUser" class="input" placeholder="Gebruikersnaam"/>
      <input id="liPass" type="password" class="input" placeholder="Wachtwoord"/>
      <div class="action"><button class="btn" onclick="login()">Inloggen</button></div>
    </div>
  </div></div>

  <div id="registerModal" class="modal"><div class="box card">
    <div class="hdr">Account maken <button class="btn ghost" onclick="closeModal('registerModal')">Sluit</button></div>
    <div class="body">
      <input id="rgUser" class="input" placeholder="Gebruikersnaam"/>
      <input id="rgPass" type="password" class="input" placeholder="Wachtwoord"/>
      <div class="action"><button class="btn" onclick="register()">Aanmaken</button></div>
    </div>
  </div></div>

  <div id="depositModal" class="modal"><div class="box card">
    <div class="hdr">Deposit <button class="btn ghost" onclick="closeModal('depositModal')">Sluit</button></div>
    <div class="body list">
      <input id="dpName" class="input" placeholder="Pet naam (bv. Huge Cat)"/>
      <input id="dpValue" class="input" type="number" placeholder="Waarde (diamanten)"/>
      <div class="action"><button class="btn" onclick="deposit()">Toevoegen</button></div>
      <div class="muted">Tip: vul waarden naar eigen marktinschatting. (Demo gebruikt geen live API.)</div>
    </div>
  </div></div>

  <script>
    // ---------- Utilities ----------
    const $ = (q) => document.querySelector(q);
    const el = (tag, cls) => Object.assign(document.createElement(tag), {className:cls||''});
    const fmt = (n) => n.toLocaleString('nl-NL');
    function toast(msg, type='info'){ addFeed({msg, type}); }

    // ---------- Storage & session ----------
    let users = JSON.parse(localStorage.getItem('petflip_users')||'{}');
    let current = localStorage.getItem('petflip_current') || null;
    let nonce = 0;
    const feed = $('#feed');

    function save(){ localStorage.setItem('petflip_users', JSON.stringify(users)); }
    function setCurrent(u){ current = u; localStorage.setItem('petflip_current', u || ''); render(); }

    // ---------- Auth ----------
    function register(){
      const u = $('#rgUser').value.trim();
      const p = $('#rgPass').value;
      if(!u || !p) return toast('Vul alles in','warn');
      if(users[u]) return toast('Gebruiker bestaat al','warn');
      users[u] = { password:p, inv:[
        {name:'Huge Cat', value:5400000000, icon:'ðŸ˜º'},
        {name:'Golden Pumpkin Cat', value:290000000, icon:'ðŸŽƒâœ¨'},
        {name:'Rainbow Huge Cat', value:10500000000, icon:'ðŸŒˆðŸ˜º'}
      ], fair:{server: randomSeed(), revealed:false}, history:[] };
      save(); closeModal('registerModal'); setCurrent(u); toast('Account aangemaakt','ok');
    }
    function login(){
      const u = $('#liUser').value.trim();
      const p = $('#liPass').value;
      if(!users[u] || users[u].password !== p) return toast('Ongeldige login','warn');
      closeModal('loginModal'); setCurrent(u); toast('Welkom '+u,'ok');
    }

    // ---------- Inventory & UI ----------
    function render(){
      const hello = $('#hello'); const invBox = $('#inventory'); invBox.innerHTML='';
      const petSelect = $('#petSelect'); const wheelPet = $('#wheelPet'); const crashPet = $('#crashPet');
      petSelect.innerHTML = wheelPet.innerHTML = crashPet.innerHTML = '';
      $('#emptyInv').style.display='none';
      if(!current){ hello.textContent='Niet ingelogd'; $('#balance').textContent='0'; $('#emptyInv').style.display='block'; return; }
      const inv = users[current].inv;
      hello.textContent = 'Ingelogd als '+current;
      if(inv.length===0){ $('#emptyInv').style.display='block'; }
      let total = 0;
      inv.forEach((it,i)=>{
        total += it.value;
        const row = el('div','row');
        const left = el('div','pet');
        const ic = el('div','avatar'); ic.textContent = it.icon || 'âœ¨';
        const name = el('div'); name.innerHTML = '<b>'+it.name+'</b><div class="muted">ðŸ’Ž '+fmt(it.value)+'</div>';
        left.appendChild(ic); left.appendChild(name);
        const act = el('div','action');
        const pick = el('button','btn ghost'); pick.textContent='Selecteer'; pick.onclick=()=> { selectInAll(i); };
        const del = el('button','btn'); del.textContent='Verwijder'; del.onclick=()=>{ users[current].inv.splice(i,1); save(); render(); toast('Item verwijderd','warn'); };
        act.appendChild(pick); act.appendChild(del);
        row.appendChild(left); row.appendChild(act);
        invBox.appendChild(row);

        // selects
        const opt = new Option(it.name+' â€” ðŸ’Ž '+fmt(it.value), i);
        petSelect.add(opt.cloneNode(true)); wheelPet.add(opt.cloneNode(true)); crashPet.add(opt.cloneNode(true));
      });
      $('#balance').textContent = fmt(total);
      // prepare provably fair display
      $('#clientSeed').value = users[current].fair.client || '';
      $('#serverHash').value = sha256(users[current].fair.server);
    }
    function selectInAll(i){
      $('#petSelect').value = i; $('#wheelPet').value = i; $('#crashPet').value = i;
      toast('Geselecteerd: '+users[current].inv[i].name,'ok');
    }
    function deposit(){
      if(!current) return toast('Log eerst in','warn');
      const name = $('#dpName').value.trim(); const val = parseInt($('#dpValue').value,10);
      if(!name || !val || val<=0) return toast('Ongeldige invoer','warn');
      users[current].inv.push({name, value:val, icon:'âœ¨'}); save(); render(); closeModal('depositModal'); toast('Toegevoegd: '+name,'ok');
    }
    function withdrawSelected(){
      if(!current) return toast('Log eerst in','warn');
      const i = parseInt($('#petSelect').value); if(Number.isNaN(i)) return toast('Selecteer een pet','warn');
      const pet = users[current].inv.splice(i,1)[0]; save(); render(); toast('Withdraw: '+pet.name,'ok');
    }

    // ---------- Coinflip ----------
    function playCoinflip(choice){
      if(!current) return toast('Log eerst in','warn');
      const i = parseInt($('#petSelect').value); if(Number.isNaN(i)) return toast('Selecteer een pet','warn');
      const pet = users[current].inv[i];
      const res = Math.random()<0.5?'heads':'tails';
      let txt = 'Flip: '+res.toUpperCase()+'. ';
      if(res===choice){
        users[current].inv.push({...pet}); // duplicate on win
        txt += 'Gewonnen! Duplicaat toegevoegd.';
        addFeed({msg:`ðŸª™ Coinflip WIN â€” ${pet.name}`, type:'win'});
      }else{
        users[current].inv.splice(i,1);
        txt += 'Verloren! Item kwijt.';
        addFeed({msg:`ðŸª™ Coinflip LOSE â€” ${pet.name}`, type:'lose'});
      }
      $('#cfResult').textContent = txt;
      save(); render();
    }

    // ---------- Wheel ----------
    const mults = [0, 0.5, 1, 2, 5, 10];
    function spinWheel(){
      if(!current) return toast('Log eerst in','warn');
      const i = parseInt($('#wheelPet').value); if(Number.isNaN(i)) return toast('Selecteer een pet','warn');
      const pet = users[current].inv.splice(i,1)[0]; // remove stake
      const spins = 1 + Math.floor(Math.random()*5);
      const idx = Math.floor(Math.random()*mults.length);
      const m = mults[idx];
      $('#wheel').style.transform = `rotate(${360*spins + idx*60 + 540}deg)`;
      setTimeout(()=>{
        if(m>0){
          const newVal = Math.floor(pet.value * m);
          users[current].inv.push({name:`${pet.name} x${m}`, value:newVal, icon:'âœ¨'});
          $('#wheelOut').innerHTML = `ðŸŽ‰ Winst x${m} â€” nieuw item ðŸ’Ž ${fmt(newVal)}`;
          addFeed({msg:`ðŸŽ¡ Wheel WIN x${m} â€” ${pet.name}`, type:'win'});
        }else{
          $('#wheelOut').textContent = 'ðŸ’¥ x0 â€” inzet verloren';
          addFeed({msg:`ðŸŽ¡ Wheel LOSE â€” ${pet.name}`, type:'lose'});
        }
        save(); render();
      }, 2200);
    }

    // ---------- Crash ----------
    let crashTimer=null, mult=1.00, crashed=false, staked=null;
    function startCrash(){
      if(!current) return toast('Log eerst in','warn');
      const i = parseInt($('#crashPet').value); if(Number.isNaN(i)) return toast('Selecteer een pet','warn');
      staked = users[current].inv.splice(i,1)[0];
      $('#crashOut').textContent='';
      $('#cashoutBtn').disabled=false;
      $('#crashBtn').disabled=true;
      mult=1.00; crashed=false;
      tickCrash();
    }
    function tickCrash(){
      crashTimer = setInterval(()=>{
        mult = +(mult + 0.02).toFixed(2);
        $('#crash').textContent = 'x'+mult.toFixed(2);
        const chance = Math.min(0.2, 0.01 + (mult-1)*0.01); // 1% â†’ 20%
        if(Math.random() < chance){
          crashed = true;
          clearInterval(crashTimer);
          $('#crash').textContent = 'ðŸ’¥ CRASH @ x'+mult.toFixed(2);
          $('#crashBtn').disabled=false;
          $('#cashoutBtn').disabled=true;
          staked=null; // lost
          addFeed({msg:`ðŸ“ˆ Crash LOSE @ x${mult.toFixed(2)}`, type:'lose'});
          save(); render();
        }
      }, 120);
    }
    function cashout(){
      if(!staked) return;
      clearInterval(crashTimer);
      const won = Math.floor(staked.value * mult);
      users[current].inv.push({name:`${staked.name} x${mult.toFixed(2)}`, value:won, icon:'âœ¨'});
      $('#crashOut').textContent = `âœ… Cashed out @ x${mult.toFixed(2)} â†’ ðŸ’Ž ${fmt(won)}`;
      addFeed({msg:`ðŸ“ˆ Crash WIN x${mult.toFixed(2)} â€” ${staked.name}`, type:'win'});
      staked=null;
      $('#crashBtn').disabled=false;
      $('#cashoutBtn').disabled=true;
      save(); render();
    }

    // ---------- Provably Fair (demo) ----------
    function randomSeed(){ return [...crypto.getRandomValues(new Uint8Array(32))].map(x=>x.toString(16).padStart(2,'0')).join(''); }
    function sha256(str){
      const buf = new TextEncoder().encode(str);
      return crypto.subtle.digest('SHA-256', buf).then(b=>{
        const arr = Array.from(new Uint8Array(b));
        return arr.map(x=>x.toString(16).padStart(2,'0')).join('');
      });
    }
    // simple sync-ish wrapper (for render)
    function sha256Sync(str){ const xhr = new XMLHttpRequest(); xhr.open('POST','',false); try{ }catch(e){} return ''; }
    async function rollDemo(){
      if(!current) return toast('Log eerst in','warn');
      const fair = users[current].fair;
      const client = ($('#clientSeed').value||'client'); fair.client = client;
      nonce++;
      const msg = client+':'+nonce;
      const hash = await hmacSHA256(fair.server, msg);
      const num = parseInt(hash.slice(0,8),16)/0xffffffff; // 0..1
      const outcome = (num<.5)?'heads':'tails';
      $('#fairOut').textContent = `hash=${hash.slice(0,16)}â€¦ â†’ ${num.toFixed(6)} â†’ ${outcome}`;
      save();
    }
    async function revealServer(){
      if(!current) return;
      const fair = users[current].fair;
      if(fair.revealed){ toast('Server seed al onthuld','warn'); return; }
      const before = await sha256(fair.server);
      $('#serverHash').value = before + '  (hash)';
      $('#fairOut').textContent = 'Server seed: '+fair.server;
      fair.revealed = true; save();
    }
    async function hmacSHA256(key, message){
      const enc = new TextEncoder();
      const k = await crypto.subtle.importKey('raw', enc.encode(key), {name:'HMAC', hash:'SHA-256'}, false, ['sign']);
      const sig = await crypto.subtle.sign('HMAC', k, enc.encode(message));
      const bytes = Array.from(new Uint8Array(sig));
      return bytes.map(b=>b.toString(16).padStart(2,'0')).join('');
    }

    // ---------- Tabs & Modals ----------
    function switchTab(name){
      document.querySelectorAll('.tab').forEach(t=>t.classList.remove('active'));
      document.querySelectorAll('[data-tab="'+name+'"]').forEach(t=>t.classList.add('active'));
      ['coinflip','wheel','crash','fair'].forEach(k=>{ $('#tab-'+k).style.display = (k===name)?'block':'none'; });
    }
    function openModal(id){ document.getElementById(id).style.display='flex'; }
    function closeModal(id){ document.getElementById(id).style.display='none'; }

    // ---------- Feed ----------
    function addFeed({msg,type}){
      const row = el('div','row'); row.style.background = '#161b38';
      const dot = el('div','tag'); dot.textContent = (new Date()).toLocaleTimeString();
      const m = el('div'); m.innerHTML = msg;
      if(type==='win') m.classList.add('win'); if(type==='lose') m.classList.add('lose');
      row.appendChild(m); row.appendChild(dot);
      feed.prepend(row);
      while(feed.children.length>50) feed.removeChild(feed.lastChild);
    }

    // ---------- Init demo user for convenience ----------
    (function init(){
      if(!current){
        // create a quick guest for first-time users
        if(!users['guest']) users['guest'] = { password:'guest', inv:[
          {name:'Huge Cat', value:5400000000, icon:'ðŸ˜º'},
          {name:'Golden Pumpkin Cat', value:290000000, icon:'ðŸŽƒâœ¨'},
          {name:'Rainbow Huge Cat', value:10500000000, icon:'ðŸŒˆðŸ˜º'}
        ], fair:{server: randomSeed(), revealed:false}, history:[] };
        setCurrent('guest');
      }
      render();
    })();
  </script>
</body>
</html>
"""
path = "/mnt/data/petflip-index.html"
with open(path, "w", encoding="utf-8") as f:
    f.write(html)

path
